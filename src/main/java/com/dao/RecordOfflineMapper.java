package com.dao;

import com.model.RecordOffline;
import com.model.RecordOfflineExample;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.ResultMap;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectKey;
import org.apache.ibatis.annotations.Update;

public interface RecordOfflineMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table record_offline
     *
     * @mbg.generated Tue Dec 05 21:16:15 HKT 2017
     */
    long countByExample(RecordOfflineExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table record_offline
     *
     * @mbg.generated Tue Dec 05 21:16:15 HKT 2017
     */
    int deleteByExample(RecordOfflineExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table record_offline
     *
     * @mbg.generated Tue Dec 05 21:16:15 HKT 2017
     */
    @Delete({
        "delete from record_offline",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table record_offline
     *
     * @mbg.generated Tue Dec 05 21:16:15 HKT 2017
     */
    @Insert({
        "insert into record_offline (offline_time, offline_loc)",
        "values (#{offlineTime,jdbcType=DATE}, #{offlineLoc,jdbcType=VARCHAR})"
    })
    @SelectKey(statement="SELECT LAST_INSERT_ID()", keyProperty="id", before=false, resultType=Integer.class)
    int insert(RecordOffline record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table record_offline
     *
     * @mbg.generated Tue Dec 05 21:16:15 HKT 2017
     */
    int insertSelective(RecordOffline record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table record_offline
     *
     * @mbg.generated Tue Dec 05 21:16:15 HKT 2017
     */
    List<RecordOffline> selectByExample(RecordOfflineExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table record_offline
     *
     * @mbg.generated Tue Dec 05 21:16:15 HKT 2017
     */
    @Select({
        "select",
        "id, offline_time, offline_loc",
        "from record_offline",
        "where id = #{id,jdbcType=INTEGER}"
    })
    @ResultMap("com.dao.RecordOfflineMapper.BaseResultMap")
    RecordOffline selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table record_offline
     *
     * @mbg.generated Tue Dec 05 21:16:15 HKT 2017
     */
    int updateByExampleSelective(@Param("record") RecordOffline record, @Param("example") RecordOfflineExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table record_offline
     *
     * @mbg.generated Tue Dec 05 21:16:15 HKT 2017
     */
    int updateByExample(@Param("record") RecordOffline record, @Param("example") RecordOfflineExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table record_offline
     *
     * @mbg.generated Tue Dec 05 21:16:15 HKT 2017
     */
    int updateByPrimaryKeySelective(RecordOffline record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table record_offline
     *
     * @mbg.generated Tue Dec 05 21:16:15 HKT 2017
     */
    @Update({
        "update record_offline",
        "set offline_time = #{offlineTime,jdbcType=DATE},",
          "offline_loc = #{offlineLoc,jdbcType=VARCHAR}",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(RecordOffline record);
}
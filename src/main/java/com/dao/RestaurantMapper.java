package com.dao;

import com.model.Restaurant;
import com.model.RestaurantExample;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.ResultMap;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectKey;
import org.apache.ibatis.annotations.Update;

public interface RestaurantMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table restaurant
     *
     * @mbg.generated Tue Dec 05 21:16:15 HKT 2017
     */
    long countByExample(RestaurantExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table restaurant
     *
     * @mbg.generated Tue Dec 05 21:16:15 HKT 2017
     */
    int deleteByExample(RestaurantExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table restaurant
     *
     * @mbg.generated Tue Dec 05 21:16:15 HKT 2017
     */
    @Delete({
        "delete from restaurant",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table restaurant
     *
     * @mbg.generated Tue Dec 05 21:16:15 HKT 2017
     */
    @Insert({
        "insert into restaurant (name, create_date, ",
        "is_deleted)",
        "values (#{name,jdbcType=VARCHAR}, #{createDate,jdbcType=DATE}, ",
        "#{isDeleted,jdbcType=BIT})"
    })
    @SelectKey(statement="SELECT LAST_INSERT_ID()", keyProperty="id", before=false, resultType=Integer.class)
    int insert(Restaurant record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table restaurant
     *
     * @mbg.generated Tue Dec 05 21:16:15 HKT 2017
     */
    int insertSelective(Restaurant record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table restaurant
     *
     * @mbg.generated Tue Dec 05 21:16:15 HKT 2017
     */
    List<Restaurant> selectByExample(RestaurantExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table restaurant
     *
     * @mbg.generated Tue Dec 05 21:16:15 HKT 2017
     */
    @Select({
        "select",
        "id, name, create_date, is_deleted",
        "from restaurant",
        "where id = #{id,jdbcType=INTEGER}"
    })
    @ResultMap("com.dao.RestaurantMapper.BaseResultMap")
    Restaurant selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table restaurant
     *
     * @mbg.generated Tue Dec 05 21:16:15 HKT 2017
     */
    int updateByExampleSelective(@Param("record") Restaurant record, @Param("example") RestaurantExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table restaurant
     *
     * @mbg.generated Tue Dec 05 21:16:15 HKT 2017
     */
    int updateByExample(@Param("record") Restaurant record, @Param("example") RestaurantExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table restaurant
     *
     * @mbg.generated Tue Dec 05 21:16:15 HKT 2017
     */
    int updateByPrimaryKeySelective(Restaurant record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table restaurant
     *
     * @mbg.generated Tue Dec 05 21:16:15 HKT 2017
     */
    @Update({
        "update restaurant",
        "set name = #{name,jdbcType=VARCHAR},",
          "create_date = #{createDate,jdbcType=DATE},",
          "is_deleted = #{isDeleted,jdbcType=BIT}",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(Restaurant record);
}